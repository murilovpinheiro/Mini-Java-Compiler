/* Generated By:JavaCC: Do not edit this line. Parser.java */
import syntaxtree.*;
import syntaxtree.Integer;
import syntaxtree.visitor.*;
import IRtree.*;
import mips.*;
import utils.*;
import temp.*;
import canon.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

// Novos métodos de análise do código, análise sintática e léxica

public class Parser implements ParserConstants {
    public static void main (String args[]) {
        Parser parser;

        if (args.length == 0){
            System.out.println("Reading the Input...");
            parser = new Parser(System.in);
        }
        else if (args.length == 1){
            try{
                System.out.println("Reading the Archive Input...");
                parser = new Parser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
                System.out.println("Archive not found.");
                return;
            }
        }
        else{
            System.out.println("Out of Pattern!");
            return;
        }
        try{
            Program prog = parser.Program();

            SymbolVisitor table_visitor = new SymbolVisitor();
            prog.accept(table_visitor);

            TypeDepthVisitor type_check = new TypeDepthVisitor(table_visitor);
            prog.accept(type_check);

            MipsFrame frame = new MipsFrame();
            IRVisitor visitorInter = new IRVisitor(type_check, frame);
            prog.accept(visitorInter);

            ArrayList<Frag> frags = visitorInter.fragments;
                        for (int i = 0; i < frags.size(); ++i) {
                            Frag atual = frags.get(i);

                            tree.Print h = new tree.Print(System.out, new CombineMap(atual.frame, new DefaultMap()));

                            System.out.println("\n\nFUNCAO: " + atual.nome);

                            System.out.println("\nSem canonizar:\n");
                            h.prStm(atual.body);

                            System.out.println("\nCanonizado:\n");
                            tree.StmList statements = Canon.linearize(atual.body);
                            for (tree.StmList c = statements; c != null; c = c.tail) {
                                h.prStm(c.head);
                            }

                            // TODO: printar os dois abaixo
                            BasicBlocks b = new BasicBlocks(statements);
                            tree.StmList t = (new TraceSchedule(b)).stms;

                            List<assem.Instr> instrucoes = ((mips.MipsFrame) atual.frame).codegen(Conversor.StmListToArray(t));

                            System.out.println("\nInstrucoes:\n");
                            for (int j = 0; j < instrucoes.size(); ++j) {
                                print(j);
                                System.out.println(instrucoes.get(j).format(h.tmap));
                            }
                            System.out.println("\nFLUXO:\n");
                            graph.AssemFlowGraph fluxo = new graph.AssemFlowGraph(Conversor.ArrayToInstrList(instrucoes));
                            fluxo.show(System.out);
                        }
        }
        catch(Exception e){
            System.out.println("Unsuccessful Reading. Showing Error Message:");
            System.out.println(e.getMessage());
        }
    }

// Expressions Declaration - Syntax Parser

// The Program Method is the where you denote the outer structure of the mini java code
// Basically the program has two parts: The Main Class and Other Classes
// The MainClass() obsviously capture the tokens of the class with the function static main
// and all other classes in the program are captured in OthersClasses()

// NENHUMA MUDANÇA
  static final public Program Program() throws ParseException {
    MainClass main;
    ClassDeclaration decl;
    ClassList classlist = new ClassList();
    main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl = ClassDefinition();
                               classlist.addElement(decl);
    }
    jj_consume_token(0);
     {if (true) return new Program(main, classlist);}
    throw new Error("Missing return statement in function");
  }

// REFATORADO, mudei os BRACE e BRACKETS para os símbolos para manter mais legível,
// havia erro no mainclass antigo abria e fechava parenteses de uma vez
  static final public MainClass MainClass() throws ParseException {
    Identifier mcname, argname;
    Statement code;
    jj_consume_token(CLASS);
    mcname = ID();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    argname = ID();
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    code = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
     {if (true) return new MainClass(mcname, argname, code);}
    throw new Error("Missing return statement in function");
  }

//This method captures all classes in the code, except for the main, the format is:
    // class <class_name>{
    //  Attributes;
    //  Methods;
    // }
// Or in the format:
    // class <class_name> extends <superclass_name>{
    //  Attributes;
    //  Methods;
    // }

// REFATORADO, extends mudado para ficar menos código
  static final public ClassDeclaration ClassDefinition() throws ParseException {
    Identifier classname, superclass = null;
    VarDeclaration vd; VarList varlist = new VarList();
    MethodDeclaration md; MethodList methodlist = new MethodList();
    jj_consume_token(CLASS);
    classname = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superclass = ID();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      vd = VarDefinition();
                               varlist.addElement(vd);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      md = MethodDefinition();
                                                                                    methodlist.addElement(md);
    }
    jj_consume_token(RBRACE);
     if (superclass == null) {if (true) return new NormalClass(classname, varlist, methodlist);}
else {if (true) return new SubClass(classname, superclass, varlist, methodlist);}
    throw new Error("Missing return statement in function");
  }

// Attribute Definition, denoted by the format:
//  type(int, int[], bool or object(denoted by <ID>)) <attr_name> ;

// FEITO, nenhuma mudança
  static final public VarDeclaration VarDefinition() throws ParseException {
    Type t; Identifier i;
    t = Type();
    i = ID();
    jj_consume_token(SCOLON);
     {if (true) return new VarDeclaration(t, i);}
    throw new Error("Missing return statement in function");
  }

//Method Definition, in format:
//  public type <method_name>(<parameters>){
//      Attributes;
//      <CODE>
//      return <Expression>;
//  }

// FEITO, mudei só o nome de algumas variáveis e reescrevi, mas no geral parece o mesmo
  static final public MethodDeclaration MethodDefinition() throws ParseException {
    Type t, others_t;
    Identifier method_name, params_name;
    Expression e;
    MethodDeclaration md; VarDeclaration vd; Statement st;

    FormalList formalist = new FormalList(); VarList varlist = new VarList(); StatementList statelist = new StatementList();
    jj_consume_token(PUBLIC);
    t = Type();
    method_name = ID();
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      others_t = Type();
      params_name = ID();
                                               formalist.addElement(new Formal(others_t, params_name));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        others_t = Type();
        params_name = ID();
                                                                                                                                                     formalist.addElement(new Formal(others_t, params_name));
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      vd = VarDefinition();
                                            varlist.addElement(vd);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case ID:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      st = Statement();
                           statelist.addElement(st);
    }
    jj_consume_token(RETURN);
    e = Expression_();
    jj_consume_token(SCOLON);
    jj_consume_token(RBRACE);
     {if (true) return new MethodDeclaration(t, method_name, formalist, varlist, statelist, e);}
    throw new Error("Missing return statement in function");
  }

// Function to check type tokens, classified in 4 possibilities:
// array of int, int, boolean and a class name

// REFATORADO, mudei o LOOKAHEAD pra 3 de 2, resto igual
  static final public Type Type() throws ParseException {
    Identifier id;
    if (jj_2_2(3)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                   {if (true) return new IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                 {if (true) return new BooleanType();}
        break;
      case INT:
        jj_consume_token(INT);
             {if (true) return new IntegerType();}
        break;
      case ID:
        id = ID();
                 {if (true) return new IdentifierType(id.toString());}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   Statement s, s2;
   Expression e, e2; Identifier id;
   StatementList sl = new StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case PRINT:
        case ID:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        s = Statement();
                          sl.addElement(s);
      }
      jj_consume_token(RBRACE);
                                                     {if (true) return new Block(sl);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      e = Expression_();
      jj_consume_token(RPAR);
      s = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
                                                                               {if (true) return new If(e, s, s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      e = Expression_();
      jj_consume_token(RPAR);
      s = Statement();
                                                          {if (true) return new While(e, s);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAR);
      e = Expression_();
      jj_consume_token(RPAR);
      jj_consume_token(SCOLON);
                                                   {if (true) return new Print(e);}
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_3(2)) {
        // coloquei de 6 para 2
              id = ID();
        jj_consume_token(EQUAL);
        e = Expression_();
        jj_consume_token(SCOLON);
                                                 {if (true) return new Assign(id, e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          id = ID();
          jj_consume_token(LBRACKET);
          e = Expression_();
          jj_consume_token(RBRACKET);
          jj_consume_token(EQUAL);
          e2 = Expression_();
          jj_consume_token(SCOLON);
                                                                            {if (true) return new ArrayAssign(id, e, e2);}
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// TODA A PARTE DE EXPRESSÕES E DE REMOÇÃO DE LEFT-RECURSION FOI REFEITA DO 0
// FIZEMOS MENOS MÉTODOS, MENOS CÓDIGO, O ANTIGO TAMBÉM ESTAVA INCOMPLETO E PARECIA NÃO FUNCIONAR EM ALGUNS CASOS.
  static final public Expression Expression_() throws ParseException {
    Expression e1;
    e1 = Expression_value();
    label_8:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_8;
      }
      e1 = Expression_final(e1);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression_value() throws ParseException {
    Expression e, e2;
    Token t;
    Identifier id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
             e = new This(); {if (true) return e;}
      break;
    case LNOT:
      jj_consume_token(LNOT);
      e2 = Expression_();
                                  e = new Not(e2); {if (true) return e;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
               e = new True(); {if (true) return e;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                e = new False(); {if (true) return e;}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                  e = new Integer(java.lang.Integer.parseInt(t.image)); {if (true) return e;}
      break;
    case ID:
      id = ID();
                  e = new IdentifierExp(id.toString()); {if (true) return e;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e2 = Expression_();
      jj_consume_token(RPAR);
                                   e = e2; {if (true) return e;}
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LBRACKET);
        e2 = Expression_();
        jj_consume_token(RBRACKET);
                                               e = new NewArray(e2); {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id = ID();
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
                                e = new NewObject(id); {if (true) return e;}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression_final(Expression left_expression) throws ParseException {
    Expression right_expression; Expression final_expression;
    Identifier id;
    ExpressionList el = new ExpressionList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
      jj_consume_token(LAND);
      right_expression = Expression_();
                                              {if (true) return new And(left_expression, right_expression);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      right_expression = Expression_();
                                                {if (true) return new Plus(left_expression, right_expression);}
      break;
    case SMALLER:
      jj_consume_token(SMALLER);
      right_expression = Expression_();
                                                   {if (true) return new LessThan(left_expression, right_expression);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      right_expression = Expression_();
                                                 {if (true) return new Minus(left_expression, right_expression);}
      break;
    case MULT:
      jj_consume_token(MULT);
      right_expression = Expression_();
                                                {if (true) return new Times(left_expression, right_expression);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      right_expression = Expression_();
      jj_consume_token(RBRACKET);
                                                 {if (true) return new  ArrayLookup(left_expression, right_expression);}
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
                             {if (true) return new ArrayLength(left_expression);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          id = ID();
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case NEW:
          case THIS:
          case TRUE:
          case FALSE:
          case LNOT:
          case NUM:
          case ID:
            right_expression = Expression_();
                                                             el.addElement(right_expression);
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[13] = jj_gen;
                break label_9;
              }
              jj_consume_token(COMMA);
              right_expression = Expression_();
                                                 el.addElement(right_expression);
            }
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
                                                                                               {if (true) return new Call(left_expression, id, el);}
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// FEITO, nenhuma mudança
  static final public Identifier ID() throws ParseException {
                   Token t;
    t = jj_consume_token(ID);
            {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(SMALLER)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_13()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(LNOT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x1000000,0x0,0x40000,0x10,0x0,0x25400,0x0,0x25400,0x25400,0x0,0xc400040,0x8000,0x10,0xc408040,0xf0000100,0x20,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x260,0x0,0x0,0x260,0x200,0x260,0x200,0x0,0x200,0x302,0x0,0x0,0x302,0x4,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
