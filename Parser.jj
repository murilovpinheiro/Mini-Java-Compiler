
PARSER_BEGIN(Parser)
import syntaxtree.*;
import syntaxtree.Integer;
import syntaxtree.visitor.*;
import IRtree.*;
import mips.*;
import utils.*;
import temp.*;
import canon.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

// Novos métodos de análise do código, análise sintática e léxica

public class Parser {
    public static void main (String args[]) {
        Parser parser;

        if (args.length == 0){
            System.out.println("Reading the Input...");
            parser = new Parser(System.in);
        }
        else if (args.length == 1){
            try{
                System.out.println("Reading the Archive Input...");
                parser = new Parser(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e) {
                System.out.println("Archive not found.");
                return;
            }
        }
        else{
            System.out.println("Out of Pattern!");
            return;
        }
        try{
            Program prog = parser.Program();

            SymbolVisitor table_visitor = new SymbolVisitor();
            prog.accept(table_visitor);

            TypeDepthVisitor type_check = new TypeDepthVisitor(table_visitor);
            prog.accept(type_check);

            MipsFrame frame = new MipsFrame();
            IRVisitor visitorInter = new IRVisitor(type_check, frame);
            prog.accept(visitorInter);

            ArrayList<Frag> frags = visitorInter.fragments;
                        for (int i = 0; i < frags.size(); ++i) {
                            Frag atual = frags.get(i);

                            tree.Print h = new tree.Print(System.out, new CombineMap(atual.frame, new DefaultMap()));

                            System.out.println("\n\nFUNCAO: " + atual.nome);

                            System.out.println("\nSem canonizar:\n");
                            h.prStm(atual.body);

                            System.out.println("\nCanonizado:\n");
                            tree.StmList statements = Canon.linearize(atual.body);
                            for (tree.StmList c = statements; c != null; c = c.tail) {
                                h.prStm(c.head);
                            }

                            // TODO: printar os dois abaixo
                            BasicBlocks b = new BasicBlocks(statements);
                            tree.StmList t = (new TraceSchedule(b)).stms;

                            List<assem.Instr> instrucoes = ((mips.MipsFrame) atual.frame).codegen(Conversor.StmListToArray(t));

                            System.out.println("\nInstrucoes:\n");
                            for (int j = 0; j < instrucoes.size(); ++j) {
                                System.out.println(instrucoes.get(j).format(h.tmap));
                            }
                            System.out.println("\nFLUXO:\n");
                            graph.AssemFlowGraph fluxo = new graph.AssemFlowGraph(Conversor.ArrayToInstrList(instrucoes));
                            fluxo.show(System.out);
                        }
        }
        catch(Exception e){
            System.out.println("Unsuccessful Reading. Showing Error Message:");
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(Parser)

// Tokens Declaration - Lexical Parser

TOKEN : {
       // Basic Definitions: Letters and Digits
        <#LETTER: (["a" - "z", "A" - "Z"])>
       |<#DIGIT: (["0" - "9"])>

       // Special Chars, commas, colons, brackets, etc.
       |<SCOLON: (";")>
       |<COMMA: (",")>
       |<DOT: (".")>
       |<LPAR: ("(")>
       |<RPAR: (")")>
       |<LBRACKET: ("[")>
       |<RBRACKET: ("]")>
       |<LBRACE: ("{")>
       |<RBRACE: ("}")>

       // Key Words

       |<IF: ("if")>
       |<ELSE: ("else")>
       |<WHILE: ("while")>
       |<NEW: ("new")>
       |<LENGTH: ("length")>
       |<PRINT: ("System.out.println")>
       |<PUBLIC: ("public")>
       |<STATIC: ("static")>
       |<VOID: ("void")>
       |<MAIN: ("main")>
       |<THIS: ("this")>       
       |<CLASS: ("class")>
       |<EXTENDS: ("extends")>
       |<RETURN: ("return")>
       // maybe has others

       // Boolean States
       |<TRUE: ("true")>
       |<FALSE: ("false")>

       // Operators
       |<PLUS: ("+")>
       |<MINUS: ("-")>
       |<MULT: ("*")>
       |<LAND: ("&&")>
       |<LOR: ("||")>
       |<LNOT: ("!")>
       |<SMALLER: ("<")>
       |<GREATER: (">")>
       |<EQUAL: ("=")>

       // Type Names
       |<INT: ("int")>
       |<BOOLEAN: ("boolean")>
       |<STRING: ("String")>
       // maybe add others operators as == and others

       // Num: Sequence of 1 or more Digits
       |<NUM: (<DIGIT>)+>

       // Variables, classes, objects, etc identifications
       // examples: a, ab, b1, z_
       |<ID: <LETTER> (<LETTER> | <DIGIT> | "_")*>
}

SKIP :
{ " "
| "\t"
| "\r"
| "\n"
| < "//" (~["\n","\r"])* ("\n" | "\r\n" | "\r") >
| < "/*" (~[])* "*/" >}

// Expressions Declaration - Syntax Parser

// The Program Method is the where you denote the outer structure of the mini java code
// Basically the program has two parts: The Main Class and Other Classes
// The MainClass() obsviously capture the tokens of the class with the function static main
// and all other classes in the program are captured in OthersClasses()

// NENHUMA MUDANÇA

Program Program() :
{
    MainClass main;
    ClassDeclaration decl;
    ClassList classlist = new ClassList();
}
{
    main = MainClass()
    (decl = ClassDefinition() {classlist.addElement(decl);})*
    <EOF>

    {return new Program(main, classlist);}
}

// REFATORADO, mudei os BRACE e BRACKETS para os símbolos para manter mais legível,
// havia erro no mainclass antigo abria e fechava parenteses de uma vez

MainClass MainClass() :
{
    Identifier mcname, argname;
    Statement code;
}
{
    <CLASS> mcname = ID() "{"
        <PUBLIC> <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" argname = ID() ")" "{"
            code = Statement()
        "}"
    "}"

    {return new MainClass(mcname, argname, code);}
}

//This method captures all classes in the code, except for the main, the format is:
    // class <class_name>{
    //  Attributes;
    //  Methods;
    // }
// Or in the format:
    // class <class_name> extends <superclass_name>{
    //  Attributes;
    //  Methods;
    // }

// REFATORADO, extends mudado para ficar menos código
ClassDeclaration ClassDefinition() :
{
    Identifier classname, superclass = null;
    VarDeclaration vd; VarList varlist = new VarList();
    MethodDeclaration md; MethodList methodlist = new MethodList();
}
{
    <CLASS> classname = ID()
    (<EXTENDS> superclass = ID())? "{"
        (vd = VarDefinition() {varlist.addElement(vd);})* (md = MethodDefinition() {methodlist.addElement(md);})*
    "}"

    {if (superclass == null) return new NormalClass(classname, varlist, methodlist);
else return new SubClass(classname, superclass, varlist, methodlist);}
}

// Attribute Definition, denoted by the format:
//  type(int, int[], bool or object(denoted by <ID>)) <attr_name> ;

// FEITO, nenhuma mudança

VarDeclaration VarDefinition() :
{
    Type t; Identifier i;
}
{
    t = Type() i = ID() <SCOLON>

    {return new VarDeclaration(t, i);}
}

//Method Definition, in format:
//  public type <method_name>(<parameters>){
//      Attributes;
//      <CODE>
//      return <Expression>;
//  }

// FEITO, mudei só o nome de algumas variáveis e reescrevi, mas no geral parece o mesmo
MethodDeclaration MethodDefinition() :
{
    Type t, others_t;
    Identifier method_name, params_name;
    Expression e;
    MethodDeclaration md; VarDeclaration vd; Statement st;

    FormalList formalist = new FormalList(); VarList varlist = new VarList(); StatementList statelist = new StatementList();
}
{
    <PUBLIC> t = Type() method_name = ID() "("
        (others_t = Type() params_name = ID() {formalist.addElement(new Formal(others_t, params_name));} ( "," others_t = Type() params_name = ID() {formalist.addElement(new Formal(others_t, params_name));})* )?
    ")" "{"
        (LOOKAHEAD(2) vd = VarDefinition() {varlist.addElement(vd);})*
        (st = Statement() {statelist.addElement(st);})*
        "return" e = Expression_() <SCOLON>
    "}"
    {return new MethodDeclaration(t, method_name, formalist, varlist, statelist, e);}
}

// Function to check type tokens, classified in 4 possibilities:
// array of int, int, boolean and a class name

// REFATORADO, mudei o LOOKAHEAD pra 3 de 2, resto igual
Type Type() :
{
    Identifier id;
}
{
    LOOKAHEAD(3)
    <INT> "[" "]" {return new IntArrayType();}
    | <BOOLEAN> {return new BooleanType();}
    | <INT> {return new IntegerType();}
    | id = ID() {return new IdentifierType(id.toString());}
}

Statement Statement() :
{
   Statement s, s2;
   Expression e, e2; Identifier id;
   StatementList sl = new StatementList();
}
{
    "{" (s = Statement() {sl.addElement(s);})* "}" { return new Block(sl); }
    | <IF> "(" e = Expression_() ")" s = Statement() <ELSE> s2 = Statement() { return new If(e, s, s2); }
    | <WHILE> "(" e = Expression_() ")" s = Statement() { return new While(e, s); }
    | <PRINT> "(" e = Expression_() ")" <SCOLON> { return new Print(e); }
    | LOOKAHEAD(2) // coloquei de 6 para 2
      id = ID() "=" e = Expression_() <SCOLON> { return new Assign(id, e); }
    | id = ID() "[" e = Expression_() "]" "=" e2 = Expression_() <SCOLON> { return new ArrayAssign(id, e, e2); }
}

// TODA A PARTE DE EXPRESSÕES E DE REMOÇÃO DE LEFT-RECURSION FOI REFEITA DO 0
// FIZEMOS MENOS MÉTODOS, MENOS CÓDIGO, O ANTIGO TAMBÉM ESTAVA INCOMPLETO E PARECIA NÃO FUNCIONAR EM ALGUNS CASOS.

Expression Expression_() :
{
    Expression e1;
}
{
    e1 = Expression_value() (LOOKAHEAD(2) e1 = Expression_final(e1))*
    { return e1; }
}

Expression Expression_value() :
{
    Expression e, e2;
    Token t;
    Identifier id;
}
{
    <THIS> { e = new This(); return e; }
    | <LNOT> e2 = Expression_() { e = new Not(e2); return e; }
    | <TRUE> { e = new True(); return e; }
    | <FALSE> { e = new False(); return e; }
    | t = <NUM> { e = new Integer(java.lang.Integer.parseInt(t.image)); return e; }
    | id = ID() { e = new IdentifierExp(id.toString()); return e; }
    | "(" e2 = Expression_() ")" { e = e2; return e; }
    | LOOKAHEAD(2)
      <NEW> <INT> "[" e2 = Expression_() "]" { e = new NewArray(e2); return e; }
    | <NEW> id = ID() "(" ")" { e = new NewObject(id); return e; }
}

Expression Expression_final(Expression left_expression) :
{
    Expression right_expression; Expression final_expression;
    Identifier id;
    ExpressionList el = new ExpressionList();
}
{
    <LAND> right_expression = Expression_() { return new And(left_expression, right_expression); }
    | <PLUS> right_expression = Expression_() { return new Plus(left_expression, right_expression); }
    | <SMALLER> right_expression = Expression_() { return new LessThan(left_expression, right_expression); }
    | <MINUS> right_expression = Expression_() { return new Minus(left_expression, right_expression); }
    | <MULT> right_expression = Expression_() { return new Times(left_expression, right_expression); }
    | "[" right_expression = Expression_() "]" { return new  ArrayLookup(left_expression, right_expression);}
    | LOOKAHEAD(2)
              "." <LENGTH> { return new ArrayLength(left_expression); }
    | "." id = ID() "(" ( right_expression = Expression_() { el.addElement(right_expression);}
        ( "," right_expression = Expression_() { el.addElement(right_expression);} )* )? ")" { return new Call(left_expression, id, el); }

}

// FEITO, nenhuma mudança
Identifier ID() : {Token t;}
{ t = <ID> {return new Identifier(t.image);}}